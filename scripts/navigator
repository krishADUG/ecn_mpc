#!/usr/bin/env python3

from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped
from nav2_simple_commander.robot_navigator import BasicNavigator
from nav_msgs.msg import Path
from map_simulator.srv import Spawn
from ackermann_msgs.msg import AckermannDrive
import rclpy
from rclpy.node import Node
from math import atan2


class Planner(Node):

    def __init__(self):
        super().__init__('navigator')

        self.goal = None
        self.goal_sub = self.create_subscription(PoseStamped, '/goal_pose', self.goal_cb, 10)
        # self.plan_pub = self.create_publisher(Path, 'plan_timed', 10)
        self.navigator = BasicNavigator('navigator', namespace='/zoe')

        replan_per = self.declare_parameter('replan_period', -1.).value

        if replan_per > 0:
            self.replanner = self.create_timer(replan_per, self.replan)

        self.reset_sub = self.create_subscription(PoseWithCovarianceStamped, '/initialpose', self.reset_cb, 10)
        self.spawner = self.create_client(Spawn, '/simulator/spawn')
        self.cmd_pub = self.create_publisher(AckermannDrive, 'cmd', 1)

        self.plan_pub = []
        for topic in ('plan', 'local_plan', 'predicted_plan'):
            self.plan_pub.append(self.create_publisher(Path, topic, 1))

        self.spawner.wait_for_service()

    def goal_cb(self, pose):
        self.goal = pose
        self.replan()

    def replan(self):
        if self.goal is None:
            return
        self.navigator.getPath(PoseStamped(), self.goal, planner_id = 'Hybrid')

    def reset_cb(self, pose):

        self.goal = None
        req = Spawn.Request()
        req.robot_namespace = '/zoe'
        req.x = pose.pose.pose.position.x
        req.y = pose.pose.pose.position.y
        req.theta = 2*atan2(pose.pose.pose.orientation.z, pose.pose.pose.orientation.w)
        self.spawner.call_async(req)
        self.cmd_pub.publish(AckermannDrive())

        # also reset plans
        path = Path()
        path.header.stamp = self.get_clock().now().to_msg()
        path.header.frame_id = 'map'
        for pub in self.plan_pub:
            pub.publish(path)


rclpy.init(args=None)
node = Planner()

rclpy.spin(node)
node.destroy_node()
rclpy.shutdown()
